* GET
    - O método GET solicita a representação de um recurso específico. Requisições utilizando o método GET devem retornar apenas dados.
        - exemplo: 
           ' GET /index.html '
* HEAD
    - O método HEAD solicita uma resposta de forma idêntica ao método GET, porém sem conter o corpo da resposta.
        - exemplo: 
           ' HEAD /index.html '
* POST
    - O método POST é utilizado para submeter uma entidade a um recurso específico, frequentemente causando uma mudança no estado do recurso ou efeitos colaterais no servidor.
        - exemplo: 
            '   POST / HTTP/1.1
                Host: foo.com
                Content-Type: application/x-www-form-urlencoded
                Content-Length: 13

                say=Hi&to=Mom    '

* PUT
    - O método PUT substitui todas as atuais representações do recurso de destino pela carga de dados da requisição.
        - exemplo: 
            PUT /new.html HTTP/1.1
            Host: example.com
            Content-type: text/html
            Content-length: 16
            <p>New File</p>

* DELETE
    - O método DELETE remove um recurso específico.
        - exemplo:
            HTTP/1.1 200 OK
            Date: Wed, 21 Oct 2015 07:28:00 GMT
            <html>
            <body>
                <h1>Arquivo removido.</h1>
            </body>
            </html>


* CONNECT 
    - O método CONNECT estabelece um túnel para o servidor identificado pelo recurso de destino.
        - exemplo: 
            CONNECT server.exemplo.com:80 HTTP/1.1
            Host: server.exemplo.com:80
            Proxy-Authorization: basic aGVsbG86d29ybGQ=

* OPTIONS
    O método OPTIONS é usado para descrever as opções de comunicação com o recurso de destino.
        - exemplo:
            HTTP/1.1 200 OK
            Allow: OPTIONS, GET, HEAD, POST
            Cache-Control: max-age=604800
            Date: Thu, 13 Oct 2016 11:45:00 GMT
            Expires: Thu, 20 Oct 2016 11:45:00 GMT
            Server: EOS (lax004/2813)
            x-ec-custom-error: 1
            Content-Length: 0

* TRACE
    - O método TRACE executa um teste de chamada loop-back junto com o caminho para o recurso de destino.
        - exemplo:
            TRACE /index.html


* PATCH 
    - O método PATCH é utilizado para aplicar modificações parciais em um recurso.
        - exemplo 
            PATCH /file.txt HTTP/1.1
            Host: www.example.com
            Content-Type: application/example
            If-Match: "e0023aa4e"
            Content-Length: 100
            [descrição das mudanças]